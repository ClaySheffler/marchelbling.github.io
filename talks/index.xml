<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>brainshave talks</title>
  <link rel="self" href="http://www.brainshave.com/talks"/>
  <link href="http://www.brainshave.com"/>
  <updated>2014-11-18T21:18:49.893Z</updated>
  <id>http://www.brainshave.com/talks</id>
  <author>
    <name>Szymon Witamborski</name>
    <email>simon@brainshave.com</email>
  </author>
  <entry>
    <title>A practical introduction to git</title>
    <link href="http://www.brainshave.com/talks/practical-introduction-git"/>
    <updated>2014-11-21T00:00:00.000Z</updated>
    <id>http://www.brainshave.com/talks/practical-introduction-git</id>
    <content type="html"> &lt;h1 id=&quot;a-practical-introduction-to-git&quot;&gt;A practical introduction to git&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;ÉCP, 2014-11-21&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;git-logo.png&quot; width=&quot;240px&quot;&gt;&lt;/center&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/marchelbling&quot;&gt;Marc Helbling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software engineer@&lt;a href=&quot;http://sketchfab.com&quot;&gt;sketchfab.com&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;iframe width=&quot;480&quot; height=&quot;320&quot; src=&quot;https://sketchfab.com/models/263ba71a43aa4347a12893006a70b314/embed?autospin=0.25&amp;amp;autostart=0&amp;amp;ui_infos=0&amp;amp;ui_controls=0&amp;amp;ui_stop=0&amp;amp;transparent=1&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot; onmousewheel=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;p&gt;Course material: &lt;a href=&quot;http://marc.helbling.fr/2014/09/practical-git-introduction/&quot;&gt;a practical git introduction&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;why-&quot;&gt;why?&lt;/h1&gt;
&lt;center&gt;&lt;img src=&quot;phd101212s.gif&quot; width=&quot;390px&quot;&gt;&lt;/center&gt;

&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;http://www.phdcomics.com/comics/archive/phd101212s.gif&quot;&gt;http://www.phdcomics.com/comics/archive/phd101212s.gif&lt;/a&gt;&lt;/p&gt;


&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Version control is the management of changes to collections of documents. Changes are usually identified by a number or letter code termed the “revision”. Revisions can be compared, restored, and with some types of files, merged.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;for each revision, a version control system should provide context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;what&lt;/strong&gt; is the revision made of?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;who&lt;/strong&gt; made the revision?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;when&lt;/strong&gt; was the revision created &lt;span class=&quot;parenthesis&quot;&gt;(in absolute time and relatively to other revisions)&lt;/span&gt;?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;why&lt;/strong&gt; was the revision created?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;vcs-timeline&quot;&gt;vcs timeline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;single-file history &lt;span class=&quot;parenthesis&quot;&gt;(1970’s — )&lt;/span&gt;: RCS, SCCS&lt;/li&gt;
&lt;li&gt;multiple files history, centralized &lt;span class=&quot;parenthesis&quot;&gt;(1990’s — )&lt;/span&gt;: subversion, csv, perforce&lt;/li&gt;
&lt;li&gt;multiple files history, decentralized &lt;span class=&quot;parenthesis&quot;&gt;(2000’s — )&lt;/span&gt;: &lt;strong&gt;git&lt;/strong&gt;, mercurial&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;footnote&quot;&gt; see &lt;a href=&quot;http://ericsink.com/vcbe/html/history_of_version_control.html&quot;&gt;http://ericsink.com/vcbe/html/history_of_version_control.html&lt;/a&gt; or &lt;br&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_revision_control_software&quot;&gt;http://en.wikipedia.org/wiki/Comparison_of_revision_control_software&lt;/a&gt;&lt;/p&gt;


&lt;h1 id=&quot;git&quot;&gt;git&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;free/open source/binaries for all major platforms&lt;/li&gt;
&lt;li&gt;decentralized&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handle very large codebase and/or long history &lt;span class=&quot;parenthesis&quot;&gt;(Linux kernel)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flexible regarding workflows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;&lt;center&gt;&lt;img src=&quot;octocat.png&quot; width=&quot;200px&quot;&gt;&lt;/center&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;-git-stupid-content-tracker-http-linux-die-net-man-1-git-&quot;&gt;&lt;a href=&quot;http://linux.die.net/man/1/git&quot;&gt;git: stupid content tracker&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the things that makes Git a pleasure to use for me is that I actually trust what Git does, because what Git does in the end is very, very stupid. — &lt;em&gt;Linus Torvald&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;basic-setup&quot;&gt;basic setup&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;git &lt;span class=&quot;parenthesis&quot;&gt;(2.0.0+ for better default behaviors)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;My Name&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email &amp;quot;me@mail.org&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;repository&quot;&gt;repository&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git init $HOME/bonjour
Initialized empty Git repository in /Users/marc/bonjour/.git/

$ cd $HOME/bonjour

$ tree -a -I hooks
.
└── .git
    ├── HEAD
    ├── config
    ├── description
    ├── info
    │   └── exclude
    ├── objects
    │   ├── info
    │   └── pack
    └── refs
        ├── heads
        └── tags&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;a git repository is just a &lt;strong&gt;hidden folder&lt;/strong&gt;!&lt;/p&gt;
&lt;h1 id=&quot;first-commit-&quot;&gt;first commit!&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ echo &amp;quot;A dummy app listing ways to just say &amp;#39;hello&amp;#39;&amp;quot; &amp;gt; README.md
$ git status
On branch master

Initial commit

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

    README.md

$ git add README.md
$ git commit -m &amp;quot;First commit&amp;quot;
[master (root-commit) 45de2f7] First commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;staging-area-1-2-&quot;&gt;staging area &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Let’s add content&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ mkdir {fr,en}
$ echo &amp;#39;bonjour&amp;#39; &amp;gt; fr/data
$ echo &amp;#39;hello&amp;#39; &amp;gt; en/data
$ git status
On branch master
Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

  en/
  fr/&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;staging-area-2-2-&quot;&gt;staging area &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;2 stage commits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;select changes to be committed&lt;pre&gt;&lt;code&gt;$ git add fr/data&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;commit changes&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git commit -m &amp;quot;Create french data file&amp;quot;
[master 13d1b4b] Create french data file
 1 file changed, 1 insertion(+)
 create mode 100644 fr/data&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;the &lt;em&gt;staging area&lt;/em&gt; is a &lt;strong&gt;commit draft&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;make local changes &lt;span class=&quot;parenthesis&quot;&gt;(local file system)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;stage/unstage changes&lt;/li&gt;
&lt;li&gt;optionally go to 1.&lt;/li&gt;
&lt;li&gt;commit the changes &lt;span class=&quot;parenthesis&quot;&gt;(git internal storage)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;let-s-dissect-a-commit&quot;&gt;let’s dissect a commit&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git cat-file -t 13d1b4b
commit

$ git cat-file commit 13d1b4b
tree 7efc3caa79efbab80f45335d4d5f8d2885daff29
parent 45de2f713305a9dcd3e82833653153c19081f36e
author Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413120925 +0200
committer Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413120925 +0200

Create french data file&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;what&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;tree 7efc3caa79efbab80f45335d4d5f8d2885daff29&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;who&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;author Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt;
committer Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;when&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;parent 45de2f713305a9dcd3e82833653153c19081f36e
... 1413120925 +0200
... 1413120925 +0200&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;why&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;Create french data file&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;but what’s a tree?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git cat-file tree 7efc3caa79efbab80f45335d4d5f8d2885daff29
100644 README.mdF??Bd???&amp;quot;?C-%D?J?x40000 fr\bbS?&amp;quot;}nC??WJ!

$ git ls-tree 7efc3caa79efbab80f45335d4d5f8d2885daff29
100644 blob 4695a64264e4d7ea22d9432d25449f1e4aeb781e    README.md
040000 tree 5c7f626253bb14227d6e074382ee91574a180f21    fr&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;and a blob?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git cat-file blob 4695a64264e4d7ea22d9432d25449f1e4aeb781e
A dummy app listing ways to just say &amp;#39;hello&amp;#39;

$ git ls-tree 5c7f626253bb14227d6e074382ee91574a180f21
100644 blob 1cd909e05d33f0f6bc4ea1caf19b5749b434ceb3    data

$ git cat-file -p 1cd909e05d33f0f6bc4ea1caf19b5749b434ceb3
bonjour&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;git-objects&quot;&gt;git objects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;commit: direct acyclic graph of all stored contexts&lt;/li&gt;
&lt;li&gt;tree: filesystem abstraction &lt;span class=&quot;parenthesis&quot;&gt;(file type, mode &amp;amp; name)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;blob: content &lt;span class=&quot;parenthesis&quot;&gt;(bunch of bytes)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;tag: a commit name&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;git only has &lt;em&gt;4&lt;/em&gt; objects!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Anything else is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configuration&lt;/li&gt;
&lt;li&gt;low &lt;span class=&quot;parenthesis&quot;&gt;(plumbing)&lt;/span&gt;/high &lt;span class=&quot;parenthesis&quot;&gt;(porcelain)&lt;/span&gt; level commands&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;storage&quot;&gt;storage&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;loose objects are full content snapshots&lt;/li&gt;
&lt;li&gt;zlib compression&lt;/li&gt;
&lt;li&gt;packfile format &lt;span class=&quot;parenthesis&quot;&gt;(incremental storage for more efficient storage)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;revisions-naming&quot;&gt;revisions naming&lt;/h1&gt;
&lt;p&gt;git uses 40 hexadecimal digits SHA-1 to sign every object&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ cat fr/data | git hash-object --stdin
bd61b2ccb39197cc3a66b43f52a6fed66a237a29&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;uses signature as object filenames&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tree .git/objects/ --matchdirs -P bd
.git/objects/
├── ...
├── bd
│   └── 61b2ccb39197cc3a66b43f52a6fed66a237a29
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and allows to use shorter prefix &lt;span class=&quot;parenthesis&quot;&gt;(as long as unambiguous)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;immutability-1-2-&quot;&gt;immutability &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ echo &amp;quot;salut&amp;quot; &amp;gt;&amp;gt; fr/data
$ git add -u &amp;amp;&amp;amp; git commit -m &amp;quot;Add more frensh data&amp;quot;
[master 456a082] Add more frensh data

$ git cat-file commit 456a082
tree 77a832b508bd5d2fb7c1eb8999e6e0a9f926434d
parent 13d1b4b062b7a7308553bc504dda2d43d32525ba
author Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413123548 +0200
committer Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413123548 +0200

Add more frensh data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s fix this typo&lt;/p&gt;
&lt;h1 id=&quot;immutability-2-2-&quot;&gt;immutability &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git commit --amend -m &amp;quot;Add more french data&amp;quot;
[master dd0f5d6] Add more french data

$ git cat-file commit dd0f5d6
tree 77a832b508bd5d2fb7c1eb8999e6e0a9f926434d
parent 13d1b4b062b7a7308553bc504dda2d43d32525ba
author Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413123548 +0200
committer Marc Helbling &amp;lt;marc.d.helbling@gmail.com&amp;gt; 1413725760 +0200

Add more french data&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;same&lt;/strong&gt; tree, parent &amp;amp; author/committer&lt;/li&gt;
&lt;li&gt;&lt;em&gt;but&lt;/em&gt; &lt;strong&gt;new&lt;/strong&gt; committer timestamp &amp;amp; new message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒  new commit ⇔  &lt;strong&gt;immutability&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s step back and look at our commit history&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git log --graph --oneline
* dd0f5d6 Add more french data
* 13d1b4b Create french data file
* 45de2f7 First commit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;parenthesis&quot;&gt;(notice that “commit history” goes upward: the higher in the graph, the more recent in terms of childhood)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;center&gt;&lt;img src=&quot;lost_commit.jpg&quot; width=&quot;680px&quot;&gt;&lt;/center&gt;

&lt;h1 id=&quot;reflog&quot;&gt;reflog&lt;/h1&gt;
&lt;p&gt;unreachable commits kept in &lt;code&gt;reflog&lt;/code&gt; for at least 2 weeks&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git reflog
dd0f5d6 HEAD@{0}: commit (amend): Add more french data
456a082 HEAD@{1}: commit: Add more frensh data
13d1b4b HEAD@{2}: commit: Create french data file
45de2f7 HEAD@{3}: commit (initial): First commit&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;may the &lt;code&gt;reflog&lt;/code&gt; be with you&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;yoda.jpg&quot; width=&quot;740px&quot;&gt;&lt;/center&gt;


&lt;h1 id=&quot;branches&quot;&gt;branches&lt;/h1&gt;
&lt;p&gt;git main branch in the DAG is called &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git branch
* master

$ cat .git/refs/heads/master
dd0f5d6500d72d54747dec1dc4139f13b5fdb8f2&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;a &lt;strong&gt;branch&lt;/strong&gt; is just a reference to a commit!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git checkout -b my_new_branch [branching_commit=current_commit]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;creating a branch in git merely costs 40 bytes&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; is an alias to the tip commit of the current branch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git show --oneline HEAD
dd0f5d6 Add more french data
diff --git a/fr/data b/fr/data
index 1cd909e..bd61b2c 100644
--- a/fr/data
+++ b/fr/data
@@ -1 +1,2 @@
 bonjour
+salut&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; will be updated after each new commit to reflect the latest revision of the branch&lt;/p&gt;
&lt;h1 id=&quot;three-way-merge-1-2-&quot;&gt;three-way merge &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;every topological operation relies on a &lt;em&gt;three-way merge&lt;/em&gt; with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MERGE_HEAD&lt;/code&gt;: modification that we want to “apply”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;: where &lt;code&gt;MERGE_HEAD&lt;/code&gt; should be applied&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORIG_HEAD&lt;/code&gt;: best common ancester of &lt;code&gt;MERGE_HEAD&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;three-way-merge-2-2-&quot;&gt;three-way merge &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Result is: &lt;code&gt;MERGE_HEAD&lt;/code&gt; + &lt;code&gt;HEAD&lt;/code&gt; - &lt;code&gt;ORIG_HEAD&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;+&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;MERGE_HEAD&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;-&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;ORIG_HEAD&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;→&lt;/th&gt;
&lt;th&gt;result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;conflict&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;By default git does &lt;em&gt;not&lt;/em&gt; show &lt;code&gt;ORIG_HEAD&lt;/code&gt; but a conflict context is important.&lt;/p&gt;
&lt;p&gt;To fix this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ git config --local merge.conflictstyle diff3&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;merge&quot;&gt;merge&lt;/h1&gt;
&lt;p&gt;A merge joins two or more histories together&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
     B------C [MERGE_HEAD] (foo)                  B------C
    /                           =&amp;gt;               /        \
---A----D---E [HEAD] *       git merge foo   ---A----D---E-F [merge commit]
[ORIG_HEAD]&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;rebase-1-2-&quot;&gt;rebase &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;A rebase moves local branch commits on top of another branch:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go to the common ancestor&lt;/li&gt;
&lt;li&gt;compute diff introduced by each commit of current branch&lt;/li&gt;
&lt;li&gt;reset the current branch to branch you’re rebasing onto&lt;/li&gt;
&lt;li&gt;apply each change in turn&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;rebase-2-2-&quot;&gt;rebase &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
     B------C *                                          C’
    /                        =&amp;gt;                         /
---A----D---E (bar)     git rebase bar     ---A----D---E

with B ⊂ D ∪ E&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;rebase --interactive&lt;/code&gt; to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit &lt;span class=&quot;parenthesis&quot;&gt;(add/remove changes)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;reorder&lt;/li&gt;
&lt;li&gt;squash/fixup&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;handling-a-conflict&quot;&gt;handling a conflict&lt;/h1&gt;
&lt;p&gt;Both &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; &lt;span class=&quot;parenthesis&quot;&gt;(and &lt;code&gt;cherry-pick&lt;/code&gt;)&lt;/span&gt; rely on three-way merge. Diverging histories ⇒  conflicts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit conflicts in &lt;code&gt;$EDITOR&lt;/code&gt;; &lt;code&gt;git add -u&lt;/code&gt;; &lt;code&gt;git … --continue&lt;/code&gt; to resolve the conflict&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git … --abort&lt;/code&gt; to give up the action&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout --(theirs|ours)&lt;/code&gt; to select &lt;code&gt;(MERGE_HEAD|HEAD)&lt;/code&gt; &lt;span class=&quot;parenthesis&quot;&gt;(⚠ with rebase)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;comparing-1-2-&quot;&gt;comparing &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abc123^&lt;/code&gt;  ⇔  &lt;code&gt;abc123~1&lt;/code&gt;: parent commit &lt;span class=&quot;parenthesis&quot;&gt;(generalizes to &lt;code&gt;abc123^^…^&lt;/code&gt;  ⇔  &lt;code&gt;abc123~n&lt;/code&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff A B&lt;/code&gt;  ⇔  &lt;code&gt;git diff A..B&lt;/code&gt;: changes between &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; &lt;span class=&quot;parenthesis&quot;&gt;(longest common subsequence)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff A...B&lt;/code&gt;: changes from common ancester of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;comparing-2-2-&quot;&gt;comparing &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch --contains A&lt;/code&gt;: branches containing commit &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log A --not B&lt;/code&gt;: commits in branch &lt;code&gt;A&lt;/code&gt; and not in branch &lt;code&gt;B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --merged&lt;/code&gt;: branches reachable in the current history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --no-merged&lt;/code&gt;: branches not reachable in current history&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;remotes&quot;&gt;remotes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;enable collaboration &lt;span class=&quot;parenthesis&quot;&gt;(kind of “central” repo)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;defined with &lt;code&gt;git remote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;accessed through http/https/ssh/git protocols&lt;/li&gt;
&lt;li&gt;namespaced: branch &lt;code&gt;bar&lt;/code&gt; of remote &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;foo/bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;namespacing defined by &lt;a href=&quot;http://git-scm.com/book/en/v2/Git-Internals-The-Refspec&quot;&gt;refspec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;fetch-pull&quot;&gt;fetch/pull&lt;/h1&gt;
&lt;p&gt;Get remote updates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rev-parse --abbrev-ref @{u}&lt;/code&gt;: show upstream branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;: only updates namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull (--rebase)&lt;/code&gt;: fetch upstream and merge &lt;span class=&quot;parenthesis&quot;&gt;(or rebase)&lt;/span&gt; upstream in current branch&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;push&quot;&gt;push&lt;/h1&gt;
&lt;p&gt;Publish local updates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be explicit: &lt;code&gt;git push origin feature/foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fails if not up-to-date: &lt;code&gt;git fetch&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fails if history rewritten:  &lt;code&gt;git push --force origin feature/foo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;reset&quot;&gt;reset&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;local file tree only: &lt;code&gt;git checkout sha1 -- path/to/content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git commit tree only: &lt;code&gt;git reset sha1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;both local file tree and git commit tree: &lt;code&gt;git reset --hard sha1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;search&quot;&gt;search&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git grep -e &amp;#39;pattern&amp;#39; abc123&lt;/code&gt;: &lt;code&gt;&amp;#39;pattern&amp;#39;&lt;/code&gt; matches in revision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log -S&amp;quot;pattern&amp;quot;&lt;/code&gt;: commits diff matching &lt;code&gt;&amp;quot;pattern&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --grep=&amp;#39;pattern&amp;#39;&lt;/code&gt;: commits message matching &lt;code&gt;&amp;#39;pattern&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --author=&amp;#39;pattern&amp;#39;&lt;/code&gt;: commits author matching &lt;code&gt;&amp;#39;pattern&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --since=1.week.ago&lt;/code&gt;: commits since last week&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;some-useful-commands&quot;&gt;some useful commands&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git cherry-pick&lt;/code&gt;: apply commit diff&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git bisect&lt;/code&gt;: dichotomy helper to determine regression introduction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;: store local diff in a stash and reset to &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;some-useful-options&quot;&gt;some useful options&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--patch&lt;/code&gt;: use hunks rather than full files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cached&lt;/code&gt;: apply command to staging area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--stat&lt;/code&gt;: display diff stat &lt;span class=&quot;parenthesis&quot;&gt;(addition/deletion)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git [command] [options] -- file/to/path&lt;/code&gt;: apply command on given path pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;on-sausages-and-commits&quot;&gt;on sausages and commits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;did you just revised the student page?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;| | * | | | | | b0c795d [#79791902] Revises student page
| | * | | | | | 9dd60ac [#79791902] Revises student page
| | * | | | | | 8aeb859 [#79791902] Revises student page
| | * | | | | | 06bba35 [#79791902] Revise student page
| | * | | | | | 8e563ed [#79791902] Revises student page
| | * | | | | | 73ea357 [#79791902] Revises student page&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;don’t show me this*&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;lets_make_sausages.jpg&quot; width=&quot;340&quot;&gt;&lt;/center&gt;

&lt;p class=&quot;footnote&quot;&gt;*But still this guy is pretty cool, and btw we’re &lt;a href=&quot;https://angel.co/sketchfab/jobs&quot;&gt;hiring&lt;/a&gt;!&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;I want to see this!&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;mr_sausage.jpg&quot;&gt;&lt;/center&gt;

&lt;hr&gt;
&lt;p&gt;the way you develop a feature or fix a bug is &lt;strong&gt;personal&lt;/strong&gt; &lt;span class=&quot;parenthesis&quot;&gt;(private)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;history is &lt;strong&gt;collective&lt;/strong&gt; &lt;span class=&quot;parenthesis&quot;&gt;(public)&lt;/span&gt; and your personal trials &amp;amp; tribulations do &lt;em&gt;not&lt;/em&gt; belong here!&lt;/p&gt;
&lt;h1 id=&quot;bad-commit-1-2-&quot;&gt;bad commit &lt;span class=&quot;parenthesis&quot;&gt;(1/2)&lt;/span&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;* 5294059 [ #61285244 ] Fix bug and make it possible to use ResourceManager without singleton
Add a way to instanciate ResourceManager without singleton, use new ResourceManager( true )
Fix argument bug when calling ready functions from ResourceManager.bindResources
Add tests&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;bad-commit-2-2-&quot;&gt;bad commit &lt;span class=&quot;parenthesis&quot;&gt;(2/2)&lt;/span&gt;&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;* 5294059 [ #61285244 ] Fix bug and make it possible to use ResourceManager without singleton
Add a way to instanciate ResourceManager without singleton, use new ResourceManager( true )
Fix argument bug when calling ready functions from ResourceManager.bindResources
Add tests&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;what bug is fixed? is it that &lt;code&gt;ResourceManager&lt;/code&gt; previously needed a singleton?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use new ResourceManager( true )&lt;/code&gt; looks like a detail, doesn’t it?&lt;/li&gt;
&lt;li&gt;and what is this other argument bug?&lt;/li&gt;
&lt;li&gt;are tests mentioned because we do not &lt;em&gt;always&lt;/em&gt; add some?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;good-commit&quot;&gt;good commit&lt;/h1&gt;
&lt;p&gt;a commit is about doing only &lt;strong&gt;one thing&lt;/strong&gt; and one thing well&lt;/p&gt;
&lt;p&gt;commit messages are &lt;strong&gt;documentation&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;Short commit summary (below 50 chars)

Detailed description of the changes introduced by the commit
(using at most 72 chars wide columns and markdown style)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and &lt;strong&gt;never&lt;/strong&gt; commit commented hunk &lt;span class=&quot;parenthesis&quot;&gt;(search history when needed)&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&quot;git-flow-general-points&quot;&gt;git flow: general points&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;git workflow should depend on &lt;em&gt;your&lt;/em&gt;  project requirements &lt;span class=&quot;parenthesis&quot;&gt;(merge or rebase?)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get upstream updates using &lt;strong&gt;&lt;code&gt;git pull --rebase&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;git fetch &amp;amp;&amp;amp; git rebase&lt;/code&gt;&lt;/strong&gt; to avoid&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;*   3f5ac04 Merge branch &amp;#39;frontend-viewer-refactoring&amp;#39; into frontend-viewer-refactoring&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;when the branch is ready, its history should be cleaned; &lt;strong&gt;&lt;code&gt;git rebase --interactive&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t merge &lt;em&gt;upstream&lt;/em&gt; code at random points.&lt;br&gt; Don’t merge &lt;em&gt;downstream&lt;/em&gt; code at random points either. — &lt;em&gt;Linus Torvald&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Rebases are how changes should pass from the top of hierarchy downwards and merges are how they flow back upwards. — &lt;em&gt;git guru&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;a-typical-git-flow&quot;&gt;a typical git flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; always be deployable to production&lt;/li&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt; is release draft and merged in &lt;code&gt;master&lt;/code&gt; when ready&lt;/li&gt;
&lt;li&gt;hotfixes merged in &lt;code&gt;master&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use tags to keep knowledge of versions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;time-to-practice-&quot;&gt;time to practice!&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/marchelbling/d103ef2ab0bbd89b2595&quot;&gt;https://gist.github.com/marchelbling/d103ef2ab0bbd89b2595&lt;/a&gt;&lt;/p&gt;
 </content>
  </entry>
</feed>
